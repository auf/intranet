<%--
/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */
--%>

<%@page import="com.liferay.portal.security.auth.CompanyThreadLocal"%>
<%@page import="java.util.ArrayList"%>
<%@page import="java.util.List"%>
<%@page import="com.liferay.portal.service.UserLocalServiceUtil"%>
<%@page import="com.liferay.portal.model.Group"%>
<%@page import="com.liferay.portal.model.User"%>

<%
int end = searchContainer.getEnd();
int start = searchContainer.getStart();

if (!portletName.equals(PortletKeys.RELATED_ASSETS)) {
	assetEntryQuery.setGroupIds(groupIds);
}

assetEntryQuery.setExcludeZeroViewCount(excludeZeroViewCount);
assetEntryQuery.setOrderByCol1(orderByColumn1);
assetEntryQuery.setOrderByCol2(orderByColumn2);
assetEntryQuery.setOrderByType1(orderByType1);
assetEntryQuery.setOrderByType2(orderByType2);

List<AssetEntry> results = new ArrayList<AssetEntry>();
int total = 0;

if (!portletName.equals(PortletKeys.RELATED_ASSETS) || (assetEntryQuery.getLinkedAssetEntryId() > 0)) {
	if (displayStyle.equals("auf-publisher")) {
		%>
		<div id="tabs">
			<ul>
				<li><a href="#tabs-1">Direction</a></li>
				<li><a href="#tabs-2">Métiers</a></li>
				<li><a href="#tabs-3">Régions</a></li>
				<li><a href="#tabs-4">Projets</a></li>
				<li><a href="#tabs-5">RH</a></li>
			</ul>
	 	<%
		
		//long journalArticleClassId = ClassNameServiceUtil.fetchClassNameId(JournalArticle.class);  
        assetEntryQuery.setClassTypeIds(new long[] { 15672 }); //AUFACTUALITE Structure
        assetEntryQuery.setStart(0);
        assetEntryQuery.setEnd(3);
        //assetEntryQuery.setClassNameIds(new long[] { journalArticleClassId });  
	 	
	 	//actualites du pole direction
	 	assetEntryQuery.setGroupIds(new long[] {90855});
		results = AssetEntryServiceUtil.getEntries(assetEntryQuery);
		request.setAttribute("view.jsp-results", results);
		total += AssetEntryServiceUtil.getEntriesCount(assetEntryQuery);
		%>
			<div id="tabs-1">
			<%@ include file="/html/portlet/asset_publisher/view_dynamic_list_asset.jspf" %>
			</div>

 		<%
	 	
	 	//
	 	assetEntryQuery.setGroupIds(new long[] {
	 			10830, //a3
	 			10826, //b3
	 			10818, //b2
	 			10814, //a2
	 			10838, //finance
	 			10842, //informatique
	 			10846, //institutionel
	 			90922}); //missions et voyage
		results = AssetEntryServiceUtil.getEntries(assetEntryQuery);
		request.setAttribute("view.jsp-results", results);
		total += AssetEntryServiceUtil.getEntriesCount(assetEntryQuery);
 		%>
			<div id="tabs-2">
			<%@ include file="/html/portlet/asset_publisher/view_dynamic_list_asset.jspf" %>
			</div>

 		<%
 		
 		//actualites de toutes les regions
	 	java.util.List <com.liferay.portal.model.Organization> regions = com.liferay.portal.service.OrganizationLocalServiceUtil.getSuborganizations(com.liferay.portal.security.auth.CompanyThreadLocal.getCompanyId(), 10901);
	 	java.util.List<com.liferay.portal.model.Group> groups = new java.util.ArrayList<com.liferay.portal.model.Group>();
		
		for (com.liferay.portal.model.Organization region : regions) {
			groups.add(region.getGroup());
		}
		
		long[] allGroupIds = new long[groups.size()];
		for (int i=0; i<groups.size(); i++) {
			if (groups.get(i).isControlPanel()) {
				continue;
			}

			if (groups.get(i).isCommunity() || groups.get(i).isOrganization()) {
				allGroupIds[i] = groups.get(i).getGroupId();
			}
		}
	 	assetEntryQuery.setGroupIds(allGroupIds);
		results = AssetEntryServiceUtil.getEntries(assetEntryQuery);
		request.setAttribute("view.jsp-results", results);
		total += AssetEntryServiceUtil.getEntriesCount(assetEntryQuery);
 		%>
			<div id="tabs-3">
			<%@ include file="/html/portlet/asset_publisher/view_dynamic_list_asset.jspf" %>
			</div>

 		<%
 		
 		//actualites de toutes les projets
	 	regions = com.liferay.portal.service.OrganizationLocalServiceUtil.getSuborganizations(com.liferay.portal.security.auth.CompanyThreadLocal.getCompanyId(), 90872);
	 	groups = new java.util.ArrayList<com.liferay.portal.model.Group>();
		
		for (com.liferay.portal.model.Organization region : regions) {
			groups.add(region.getGroup());
		}
		
		allGroupIds = new long[groups.size()];
		for (int i=0; i<groups.size(); i++) {
			if (groups.get(i).isControlPanel()) {
				continue;
			}

			if (groups.get(i).isCommunity() || groups.get(i).isOrganization()) {
				allGroupIds[i] = groups.get(i).getGroupId();
			}
		}
	 	assetEntryQuery.setGroupIds(allGroupIds);
		results = AssetEntryServiceUtil.getEntries(assetEntryQuery);
		request.setAttribute("view.jsp-results", results);
		total += AssetEntryServiceUtil.getEntriesCount(assetEntryQuery);
 		%>
			<div id="tabs-4">
			<%@ include file="/html/portlet/asset_publisher/view_dynamic_list_asset.jspf" %>
			</div>

 		<%
 		

	 	//actualites du pole RH
	 	assetEntryQuery.setGroupIds(new long[] {10850});
		results = AssetEntryServiceUtil.getEntries(assetEntryQuery);
		request.setAttribute("view.jsp-results", results);
		total += AssetEntryServiceUtil.getEntriesCount(assetEntryQuery);
 		%>
			<div id="tabs-5">
			<%@ include file="/html/portlet/asset_publisher/view_dynamic_list_asset.jspf" %>
			</div>

 		<%
		
	 	%>
	 	</div>
	 	<%
		

		
	}
	else if (assetVocabularyId > 0) {
		AssetVocabulary assetVocabulary = AssetVocabularyLocalServiceUtil.getVocabulary(assetVocabularyId);

		List<AssetCategory> assetCategories = AssetCategoryLocalServiceUtil.getVocabularyRootCategories(assetVocabulary.getVocabularyId(), QueryUtil.ALL_POS, QueryUtil.ALL_POS, null);

		assetEntryQuery.setClassNameIds(classNameIds);

		for (AssetCategory assetCategory : assetCategories) {
			assetCategory = assetCategory.toEscapedModel();

			long[] oldAllCategoryIds = assetEntryQuery.getAllCategoryIds();

			long[] newAllAssetCategoryIds = ArrayUtil.append(oldAllCategoryIds, assetCategory.getCategoryId());

			assetEntryQuery.setAllCategoryIds(newAllAssetCategoryIds);

			int groupTotal = AssetEntryServiceUtil.getEntriesCount(assetEntryQuery);

			total += groupTotal;

			assetEntryQuery.setEnd(end);
			assetEntryQuery.setStart(start);

			results = AssetEntryServiceUtil.getEntries(assetEntryQuery);

			if (!results.isEmpty()) {
				searchContainer.setResults(results);

				request.setAttribute("view.jsp-results", results);
	%>

				<h3 class="asset-entries-group-label"><%= assetCategory.getTitle(locale) %></h3>

				<%@ include file="/html/portlet/asset_publisher/view_dynamic_list_asset.jspf" %>

	<%
			}

			if (groupTotal > 0) {
				if ((end > 0) && (end > groupTotal)) {
					end -= groupTotal;
				}
				else {
					end = 0;
				}

				if ((start > 0) && (start > groupTotal)) {
					start -= groupTotal;
				}
				else {
					start = 0;
				}
			}

			assetEntryQuery.setAllCategoryIds(oldAllCategoryIds);
			assetEntryQuery.setEnd(QueryUtil.ALL_POS);
			assetEntryQuery.setStart(QueryUtil.ALL_POS);
		}

		searchContainer.setTotal(total);
	}
	else if (!groupByClass) {
		if (displayStyle.equals("auf-activities") || displayStyle.equals("auf-event-list")) {
			//then autoselect all groups
			List<Group> groups;
			long[] allGroupIds;
			if (displayStyle.equals("auf-activities")) {
				long groupId = themeDisplay.getLayout().getGroupId(); 
				long orgId = GroupLocalServiceUtil.getGroup(groupId).getOrganizationId();
				
				java.util.Queue<com.liferay.portal.model.Organization> remainder = new java.util.LinkedList<com.liferay.portal.model.Organization>();
				remainder.addAll(com.liferay.portal.service.OrganizationLocalServiceUtil.getSuborganizations(com.liferay.portal.security.auth.CompanyThreadLocal.getCompanyId(), orgId));
				
				groups = new java.util.ArrayList<com.liferay.portal.model.Group>();
				
				while (!remainder.isEmpty()) {
					com.liferay.portal.model.Organization org = remainder.poll();
					remainder.addAll(com.liferay.portal.service.OrganizationLocalServiceUtil.getSuborganizations(com.liferay.portal.security.auth.CompanyThreadLocal.getCompanyId(), org.getOrganizationId()));

					groups.add(org.getGroup());
				}
				
				allGroupIds = new long[groups.size()+1];
				allGroupIds[groups.size()] = groupId;
			} else {
				groups = GroupLocalServiceUtil.getGroups(-1, -1);
				allGroupIds = new long[groups.size()];
			}
			for (int i=0; i<groups.size(); i++) {
				if (groups.get(i).isControlPanel()) {
					continue;
				}
	
				if (groups.get(i).isCommunity() || groups.get(i).isOrganization()) {
					allGroupIds[i] = groups.get(i).getGroupId();
				}
			}
			
			assetEntryQuery.setGroupIds(allGroupIds);
		} else if (displayStyle.equals("auf-activities-collaborative")) {
			//then autoselect all groups from the collaborative space
			List<Group> groups = new ArrayList<Group>();;
			long[] allGroupIds;
			
			User liferayUser = UserLocalServiceUtil.getUser(themeDisplay.getUserId());
			
			for (Group site : liferayUser.getGroups()) {
			  if (site.isRegularSite()) {
				  groups.add(site);
			  }
			}
			
			allGroupIds = new long[groups.size()];

			for (int i=0; i<groups.size(); i++) {
				if (groups.get(i).isControlPanel()) {
					continue;
				}
	
				if (groups.get(i).isCommunity() || groups.get(i).isOrganization()) {
					allGroupIds[i] = groups.get(i).getGroupId();
				}
			}
			
			assetEntryQuery.setGroupIds(allGroupIds);
		} else if (displayStyle.equals("auf-activities-pole")) {
			//then autoselect all groups from the poles
			List<Group> groups;
			long[] allGroupIds;
			long orgId = 10801;
			
			java.util.Queue<com.liferay.portal.model.Organization> remainder = new java.util.LinkedList<com.liferay.portal.model.Organization>();
			remainder.addAll(com.liferay.portal.service.OrganizationLocalServiceUtil.getSuborganizations(com.liferay.portal.security.auth.CompanyThreadLocal.getCompanyId(), orgId));
			
			groups = new java.util.ArrayList<com.liferay.portal.model.Group>();
			
			while (!remainder.isEmpty()) {
				com.liferay.portal.model.Organization org = remainder.poll();
				remainder.addAll(com.liferay.portal.service.OrganizationLocalServiceUtil.getSuborganizations(com.liferay.portal.security.auth.CompanyThreadLocal.getCompanyId(), org.getOrganizationId()));

				groups.add(org.getGroup());
			}
			
			allGroupIds = new long[groups.size()];

			for (int i=0; i<groups.size(); i++) {
				if (groups.get(i).isControlPanel()) {
					continue;
				}
	
				if (groups.get(i).isCommunity() || groups.get(i).isOrganization()) {
					allGroupIds[i] = groups.get(i).getGroupId();
				}
			}
			
			assetEntryQuery.setGroupIds(allGroupIds);
		}
		assetEntryQuery.setClassNameIds(classNameIds);

		total = AssetEntryServiceUtil.getEntriesCount(assetEntryQuery);

		searchContainer.setTotal(total);

		assetEntryQuery.setEnd(end);
		assetEntryQuery.setStart(start);

		results = AssetEntryServiceUtil.getEntries(assetEntryQuery);

		searchContainer.setResults(results);

		request.setAttribute("view.jsp-results", results);
	%>

		<%@ include file="/html/portlet/asset_publisher/view_dynamic_list_asset.jspf" %>

	<%
	}
	else {
		for (long classNameId : classNameIds) {
			long[] oldGroupClassNameIds = assetEntryQuery.getClassNameIds();

			long[] groupClassNameIds = {classNameId};

			assetEntryQuery.setClassNameIds(groupClassNameIds);

			String groupClassName = PortalUtil.getClassName(classNameId);

			AssetRendererFactory groupAssetRendererFactory = AssetRendererFactoryRegistryUtil.getAssetRendererFactoryByClassName(groupClassName);

			int groupTotal = AssetEntryServiceUtil.getEntriesCount(assetEntryQuery);

			total += groupTotal;

			assetEntryQuery.setEnd(end);
			assetEntryQuery.setStart(start);

			results = AssetEntryServiceUtil.getEntries(assetEntryQuery);

			searchContainer.setResults(results);

			request.setAttribute("view.jsp-results", results);

			if (!results.isEmpty()) {
	%>

				<h3 class="asset-entries-group-label"><liferay-ui:message key="<%= groupAssetRendererFactory.getType() %>" /></h3>

				<%@ include file="/html/portlet/asset_publisher/view_dynamic_list_asset.jspf" %>

	<%
			}

			if (!portletName.equals(PortletKeys.RECENT_CONTENT)) {
				if (groupTotal > 0) {
					if ((end > 0) && (end > groupTotal)) {
						end -= groupTotal;
					}
					else {
						end = 0;
					}

					if ((start > 0) && (start > groupTotal)) {
						start -= groupTotal;
					}
					else {
						start = 0;
					}
				}

				assetEntryQuery.setClassNameIds(oldGroupClassNameIds);
				assetEntryQuery.setEnd(QueryUtil.ALL_POS);
				assetEntryQuery.setStart(QueryUtil.ALL_POS);
			}
		}

		searchContainer.setTotal(total);
	}
}

if (total == 0) {
	if (!showPortletWithNoResults && ((addPortletURLs == null) || addPortletURLs.isEmpty()) && !((assetCategoryId > 0) || Validator.isNotNull(assetTagName))) {
		renderRequest.setAttribute(WebKeys.PORTLET_CONFIGURATOR_VISIBILITY, Boolean.TRUE);
	}
%>

	<div class="portlet-msg-info">
		<c:choose>
			<c:when test="<%= !portletName.equals(PortletKeys.RELATED_ASSETS) %>">
				<liferay-ui:message key="there-are-no-results" />
			</c:when>
			<c:otherwise>
				<liferay-ui:message key="there-are-no-related-assets" />
			</c:otherwise>
		</c:choose>
	</div>

<%
}
%>